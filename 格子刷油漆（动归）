题目：
问题描述
　　X国的一段古城墙的顶端可以看成 2*N个格子组成的矩形（如下图所示），现需要把这些格子刷上保护漆。


　　你可以从任意一个格子刷起，刷完一格，可以移动到和它相邻的格子（对角相邻也算数），但不能移动到较远的格子（因为油漆未干不能踩！）
　　比如：a d b c e f 就是合格的刷漆顺序。
　　c e f d a b 是另一种合适的方案。
　　当已知 N 时，求总的方案数。当N较大时，结果会迅速增大，请把结果对 1000000007 (十亿零七) 取模。
输入格式
　　输入数据为一个正整数（不大于1000）
输出格式
　　输出数据为一个正整数。
样例输入
2
样例输出
24
样例输入
3
样例输出
96
样例输入
22
样例输出
359635897

此题代码较简单，但要认真分析题目，一步一步找到动态规划的关键点。
题目分析：将全部格子刷完油漆的方式主要分为两大类：1.从边缘四个格子出发，将剩下的全部格子刷完。2.从中间出发，先刷完一边的格子后，回到出发的该列，再将
另一边的格子用第一种的方式刷完。
a[n]表示从边缘出发，刷完剩下的格子的方式的种类数，b[n]表示从i列出发刷完一边的格子后回到i列的种类数。
1.当从格子的边缘出发时，有三种不同的情况：
     （1）：先走出发这一列的另一个格子，剩下的局面为a[i-1]种走法。可能走到第二列的上面的格子或下面的格子。故种类数为2*a[i-1]。
     （2）：第一步先往另一列走，然后走完剩下的格子后再回到第一列，这种走法其实种类数就是b[i]。种类数为b[i];
     （3）：先走完前两列，剩下的局面为a[i-2]种走法，走完前两列除去与上面第二种重复的走法外，还有两种走法，这两种走法走到第三列时也可以选择走上面的格子或
            下面的格子。种类数为2*2*a[i-2]。
      边缘有四个格子，所以从边缘出发的总种类数为4*（2*a[i-1]+b[i]+2*2*a[i-2])
2.当从中间出发时，要先刷完一边后回到出发列再用边缘出发的方法刷完另一边。
    当先刷左边时：可能先刷左上或左下，所以种类数为2*b[i-1],然后回到中间，刷完另一边，种类数为2*a[n-i],第一步可能先刷上面或者下面
                  所以种类数为2*2*b[i-1]*2*a[n-i]
    当先刷右边时，与上面的顺序相反，种类数为2*2*a[i-1]*2*b[n-i]
    
代码：
import java.util.*;
public class Main {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		long[] a = new long[n+1];
		long[] b = new long[n+1];
		long sum = 0;
		b[1] = 1;
		for(int i=2; i<=n; i++){
			b[i] = 2*b[i-1]%1000000007;
		}
		a[1] = 1;
		a[2] = 6;
		for(int i=3; i<=n; i++){
			a[i] = (2*a[i-1] + b[i] + 2*2*a[i-2])%1000000007;
		}
		sum += (4*a[n])%1000000007;
		for(int i=2; i<n; i++) {
			sum += (b[i-1]*2)%1000000007 * (2*a[n-i])%1000000007 * 2;
			sum += (b[n-i]*2)%1000000007 * (2*a[i-1])%1000000007 * 2;
			sum %= 1000000007;
		}
		System.out.println(sum);
	}
}
